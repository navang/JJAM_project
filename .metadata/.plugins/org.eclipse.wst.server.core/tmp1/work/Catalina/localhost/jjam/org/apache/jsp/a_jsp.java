/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.20
 * Generated at: 2019-07-14 06:28:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class a_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=313dc2a3dad52079f42012b67c645f76&libraries=services\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div id=\"map\" style=\"width:500px;height:400px;\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(37.54699, 127.09598), // 지도의 중심좌표\r\n");
      out.write("        level: 13 // 지도의 확대 레벨\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("//주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("// 마커이미지의 주소입니다    \r\n");
      out.write("var imageSrc = \"http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png\", \r\n");
      out.write("    imageSize = new kakao.maps.Size(64, 69), // 마커이미지의 크기입니다\r\n");
      out.write("    imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n");
      out.write("      \r\n");
      out.write("    var marker = new kakao.maps.Marker(); // 마커    \r\n");
      out.write("    \r\n");
      out.write(" var infowindow = new kakao.maps.InfoWindow({zindex:1}); //클릭한 위치에 대한 주소를 표시할 인포윈도우입니다\r\n");
      out.write("\r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(\r\n");
      out.write("    \t    'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png',\r\n");
      out.write("    \t    new kakao.maps.Size(31, 35), new kakao.maps.Point(13, 34));\r\n");
      out.write(" \r\n");
      out.write(" // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다\r\n");
      out.write("    searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n");
      out.write(" \r\n");
      out.write("\t//위도,경도 변수선언\r\n");
      out.write(" \tvar latlng;\r\n");
      out.write("\tvar latitude;\r\n");
      out.write("\tvar longitude;\r\n");
      out.write("//한번 클릭\r\n");
      out.write("    kakao.maps.event.addListener(map, 'click', function(mouseEvent) {\r\n");
      out.write("    \tsearchDetailAddrFromCoords(mouseEvent.latLng, function(result, status) {\r\n");
      out.write("    \t\t\r\n");
      out.write("        latlng = mouseEvent.latLng;  //위도 경도값\r\n");
      out.write("        // 마커를 클릭한 위치에 표시합니다 \r\n");
      out.write("\t\tmarker.setPosition(mouseEvent.latLng);\r\n");
      out.write("        marker.setImage(markerImage);\r\n");
      out.write("        marker.setMap(map);\r\n");
      out.write("        \r\n");
      out.write("        if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("        \t var detailAddr = !!result[0].road_address ? '<div>도로명주소 : ' + result[0].road_address.address_name + '</div>' : '';\r\n");
      out.write("             detailAddr += '<div>지번 주소: ' +'<span class=\"address\">'+ result[0].address.address_name +'</span>'+ '</div>';\r\n");
      out.write("             \r\n");
      out.write("             //위도, 경도\r\n");
      out.write("             var a = String(latlng);\r\n");
      out.write("             latitude = String(a.substring(1,18));\r\n");
      out.write("             longitude = String(a.substring(20,38));\r\n");
      out.write("             \r\n");
      out.write("             var content = '<div class=\"bAddr\">' +\r\n");
      out.write("                             '<span class=\"title\">법정동 주소정보</span>' + \r\n");
      out.write("                             detailAddr + latlng +   //주소, 위도, 경도값\r\n");
      out.write("                         '</div>';\r\n");
      out.write("  \r\n");
      out.write("   // 인포윈도우에 클릭한 위치에 대한 법정동 상세 주소정보를 표시합니다\r\n");
      out.write("      infowindow.setContent(content);\r\n");
      out.write("      infowindow.open(map, marker);\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write(" \r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("    });\r\n");
      out.write("   \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("// 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("new kakao.maps.Marker({\r\n");
      out.write("    position: new kakao.maps.LatLng(37.43699, 127.09598), \r\n");
      out.write("    image: new kakao.maps.MarkerImage(\"./resources/image/category_icons_pin/meat_pin.png\", imageSize, imageOption) // 마커이미지 설정 \r\n");
      out.write("}).setMap(map);  \r\n");
      out.write("new kakao.maps.Marker({\r\n");
      out.write("    position: new kakao.maps.LatLng(36.54699, 127.09598), \r\n");
      out.write("    image: new kakao.maps.MarkerImage(\"./resources/image/category_icons_pin/ingredients_pin.png\", imageSize, imageOption) // 마커이미지 설정 \r\n");
      out.write("}).setMap(map);  \r\n");
      out.write("new kakao.maps.Marker({\r\n");
      out.write("    position: new kakao.maps.LatLng(36.24699, 127.09598), \r\n");
      out.write("    image: new kakao.maps.MarkerImage(\"./resources/image/category_icons_pin/seafood_pin.png\", imageSize, imageOption) // 마커이미지 설정 \r\n");
      out.write("}).setMap(map);  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다\r\n");
      out.write("kakao.maps.event.addListener(map, 'idle', function() {\r\n");
      out.write("    searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function searchAddrFromCoords(coords, callback) {\r\n");
      out.write("    // 좌표로 행정동 주소 정보를 요청합니다\r\n");
      out.write("    geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);         \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function searchDetailAddrFromCoords(coords, callback) {\r\n");
      out.write("    // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n");
      out.write("    geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다\r\n");
      out.write("function displayCenterInfo(result, status) {\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("        var infoDiv = document.getElementById('centerAddr');\r\n");
      out.write("\r\n");
      out.write("        for(var i = 0; i < result.length; i++) {\r\n");
      out.write("            // 행정동의 region_type 값은 'H' 이므로\r\n");
      out.write("//             if (result[i].region_type === 'H') {\r\n");
      out.write("//                 infoDiv.innerHTML = result[i].address_name;\r\n");
      out.write("//                 break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }    \r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\t\r\n");
      out.write("\t <div class=\"map_wrap\">a\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden; margin-left: 80px\"></div>\r\n");
      out.write("    <div class=\"hAddr\">\r\n");
      out.write("     </div><!--  end.hAddr -->\r\n");
      out.write("\t</div><!--  end div.map_wrap -->\r\n");
      out.write("      <div id=\"map\" style=\"width:100px;height:350px;\"></div>     \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
